From 5ce78897f6a2f127792bd475f105104a0197bdfd Mon Sep 17 00:00:00 2001
From: jaeheonji <atx6419@gmail.com>
Date: Wed, 16 Feb 2022 01:00:05 +0900
Subject: [PATCH 1/3] feat: update command for macOS

---
 src/bridge/command.rs | 16 +++++++++-------
 1 file changed, 9 insertions(+), 7 deletions(-)

diff --git a/src/bridge/command.rs b/src/bridge/command.rs
index 7032c54b..6a69f5d6 100644
--- a/src/bridge/command.rs
+++ b/src/bridge/command.rs
@@ -48,18 +48,18 @@ fn build_nvim_cmd() -> TokioCommand {
 }
 
 // Creates a shell command if needed on this platform (wsl or macos)
-fn create_platform_shell_command(command: String) -> Option<StdCommand> {
+fn create_platform_shell_command(command: &str, args: Vec<&str>) -> Option<StdCommand> {
     if cfg!(target_os = "windows") && SETTINGS.get::<CmdLineSettings>().wsl {
         let mut result = StdCommand::new("wsl");
         result.args(&["$SHELL", "-lic"]);
         result.arg(command);
+        result.args(&args);
 
         Some(result)
     } else if cfg!(target_os = "macos") {
-        let shell = env::var("SHELL").unwrap();
-        let mut result = StdCommand::new(shell);
-        result.args(&["-lic"]);
-        result.arg(command);
+        let mut result = StdCommand::new(command);
+        result.args(&args);
+
         Some(result)
     } else {
         None
@@ -67,7 +67,8 @@ fn create_platform_shell_command(command: String) -> Option<StdCommand> {
 }
 
 fn platform_exists(bin: &str) -> bool {
-    if let Some(mut exists_command) = create_platform_shell_command(format!("exists -x {}", bin)) {
+    // if let Some(mut exists_command) = create_platform_shell_command(format!("exists -x {}", bin)) {
+    if let Some(mut exists_command) = create_platform_shell_command("exists", vec!["-x", bin]) {
         if let Ok(output) = exists_command.output() {
             output.status.success()
         } else {
@@ -80,7 +81,8 @@ fn platform_exists(bin: &str) -> bool {
 }
 
 fn platform_which(bin: &str) -> Option<String> {
-    if let Some(mut which_command) = create_platform_shell_command(format!("which {}", bin)) {
+    if let Some(mut which_command) = create_platform_shell_command("which", vec![bin]) {
+        info!("Running which command: {:?}", which_command);
         if let Ok(output) = which_command.output() {
             if output.status.success() {
                 let nvim_path = String::from_utf8(output.stdout).unwrap();

From 073ffdc300f9ea5f3f64dec8d0f322bd74e58375 Mon Sep 17 00:00:00 2001
From: jaeheonji <atx6419@gmail.com>
Date: Wed, 16 Feb 2022 01:38:43 +0900
Subject: [PATCH 2/3] feat: update command for windows

---
 src/bridge/command.rs | 5 ++---
 1 file changed, 2 insertions(+), 3 deletions(-)

diff --git a/src/bridge/command.rs b/src/bridge/command.rs
index 6a69f5d6..7f08781a 100644
--- a/src/bridge/command.rs
+++ b/src/bridge/command.rs
@@ -51,9 +51,8 @@ fn build_nvim_cmd() -> TokioCommand {
 fn create_platform_shell_command(command: &str, args: Vec<&str>) -> Option<StdCommand> {
     if cfg!(target_os = "windows") && SETTINGS.get::<CmdLineSettings>().wsl {
         let mut result = StdCommand::new("wsl");
-        result.args(&["$SHELL", "-lic"]);
-        result.arg(command);
-        result.args(&args);
+        result.args(&["$SHELL", "-lc"]);
+        result.arg(format!("{} {}", command, args.join(" ")));
 
         Some(result)
     } else if cfg!(target_os = "macos") {

From 6ae51457bea3c66b23d405c3900ae6af51fda28b Mon Sep 17 00:00:00 2001
From: jaeheonji <atx6419@gmail.com>
Date: Tue, 22 Feb 2022 17:51:49 +0900
Subject: [PATCH 3/3] refactor: apply review

---
 src/bridge/command.rs | 15 +++++++--------
 1 file changed, 7 insertions(+), 8 deletions(-)

diff --git a/src/bridge/command.rs b/src/bridge/command.rs
index 7f08781a..2aef371f 100644
--- a/src/bridge/command.rs
+++ b/src/bridge/command.rs
@@ -4,7 +4,7 @@ use std::{
     process::{Command as StdCommand, Stdio},
 };
 
-use log::{error, info, warn};
+use log::{debug, error, warn};
 use tokio::process::Command as TokioCommand;
 
 use crate::{cmd_line::CmdLineSettings, settings::*};
@@ -12,7 +12,7 @@ use crate::{cmd_line::CmdLineSettings, settings::*};
 pub fn create_nvim_command() -> TokioCommand {
     let mut cmd = build_nvim_cmd();
 
-    info!("Starting neovim with: {:?}", cmd);
+    debug!("Starting neovim with: {:?}", cmd);
 
     #[cfg(not(debug_assertions))]
     cmd.stderr(Stdio::piped());
@@ -48,7 +48,7 @@ fn build_nvim_cmd() -> TokioCommand {
 }
 
 // Creates a shell command if needed on this platform (wsl or macos)
-fn create_platform_shell_command(command: &str, args: Vec<&str>) -> Option<StdCommand> {
+fn create_platform_shell_command(command: &str, args: &[&str]) -> Option<StdCommand> {
     if cfg!(target_os = "windows") && SETTINGS.get::<CmdLineSettings>().wsl {
         let mut result = StdCommand::new("wsl");
         result.args(&["$SHELL", "-lc"]);
@@ -57,7 +57,7 @@ fn create_platform_shell_command(command: &str, args: Vec<&str>) -> Option<StdCo
         Some(result)
     } else if cfg!(target_os = "macos") {
         let mut result = StdCommand::new(command);
-        result.args(&args);
+        result.args(args);
 
         Some(result)
     } else {
@@ -66,8 +66,7 @@ fn create_platform_shell_command(command: &str, args: Vec<&str>) -> Option<StdCo
 }
 
 fn platform_exists(bin: &str) -> bool {
-    // if let Some(mut exists_command) = create_platform_shell_command(format!("exists -x {}", bin)) {
-    if let Some(mut exists_command) = create_platform_shell_command("exists", vec!["-x", bin]) {
+    if let Some(mut exists_command) = create_platform_shell_command("exists", &["-x", bin]) {
         if let Ok(output) = exists_command.output() {
             output.status.success()
         } else {
@@ -80,8 +79,8 @@ fn platform_exists(bin: &str) -> bool {
 }
 
 fn platform_which(bin: &str) -> Option<String> {
-    if let Some(mut which_command) = create_platform_shell_command("which", vec![bin]) {
-        info!("Running which command: {:?}", which_command);
+    if let Some(mut which_command) = create_platform_shell_command("which", &[bin]) {
+        debug!("Running which command: {:?}", which_command);
         if let Ok(output) = which_command.output() {
             if output.status.success() {
                 let nvim_path = String::from_utf8(output.stdout).unwrap();
